<!--ViewModelLocator-使用ViewModelLocator:
    ViewModelLocator-ViewModel定位器
    AutoWireViewModel-自动引导ViewModel,自动匹配ViewModels文件下的 命名空间.ViewModels下的 (View类名+ViewModel)类作为View的ViewModel-->
    <Window x:Class="MyPrism_WPF.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"            
        xmlns:prism="http://prismlibrary.com/"
        prism:ViewModelLocator.AutoWireViewModel="True"
        Title="{Binding Title}" Height="800" Width="1200" WindowState="Maximized" >

    <!--为 ModuleERegion 的 Tab页的标签设置显示内容-->
    <Window.Resources>
        <Style TargetType="TabItem">
            <Setter Property="Header" Value="{Binding DataContext.Title}" />
        </Style>
    </Window.Resources>
    <Grid>
        <ScrollViewer>
        <DockPanel LastChildFill="True">
                <WrapPanel>
                    <!--自定义区域适配器,为StackPanel创建一个自定义区域适配器-->
                    <StackPanel prism:RegionManager.RegionName="StackPanelRegion" />

                    <!--查看注射-使用View Injection手动添加和删除视图-->
                    <!--<Button DockPanel.Dock="Top" Click="Button_Click">查看注射-使用View Injection手动添加和删除视图</Button>-->

                    <!--查看激活/停用-手动激活和停用视图-->
                    <!--<StackPanel>
                <Button Content="Activate ViewA" Click="Button_Click"/>
                <Button Content="Deactivate ViewA" Click="Button_Click_1"/>
                <Button Content="Activate ViewB" Click="Button_Click_2"/>
                <Button Content="Deactivate ViewB" Click="Button_Click_3"/>
            </StackPanel>-->

                    <!--模块-->
                    <StackPanel>
                        <ContentControl prism:RegionManager.RegionName="ModuleARegion" />
                        <ContentControl prism:RegionManager.RegionName="ModuleBRegion" />
                        <ContentControl prism:RegionManager.RegionName="ModuleCRegion" />
                        <Button DockPanel.Dock="Top" Content="模块手动加载-使用IModuleManager手动加载模块" Click="Button_Click" />
                        <ContentControl prism:RegionManager.RegionName="ModuleDRegion" />
                    </StackPanel>

                    <!--DelegateCommand-使用DelegateCommand和 DelegateCommand<T>-->
                    <StackPanel>
                        <CheckBox IsChecked="{Binding IsEnabled}" Content="Can Execute Command" Margin="10"/>
                        <Button Command="{Binding ExecuteDelegateCommand}" Content="DelegateCommand" Margin="10"/>
                        <Button Command="{Binding DelegateCommandObservesProperty}" Content="DelegateCommand ObservesProperty" Margin="10"/>
                        <Button Command="{Binding DelegateCommandObservesCanExecute}" Content="DelegateCommand ObservesCanExecute" Margin="10"/>
                        <Button Command="{Binding ExecuteGenericDelegateCommand}" CommandParameter="Passed Parameter" Content="DelegateCommand Generic" Margin="10"/>
                        <TextBlock Text="{Binding UpdateText}" Margin="10" FontSize="22"/>
                    </StackPanel>

                    <!--命令-->
                    <StackPanel>
                        <!--CompositeCommands-了解如何使用CompositeCommands作为单个命令调用多个命令-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Button Content="CompositeCommands-了解如何使用CompositeCommands作为单个命令调用多个命令" Margin="10" Command="{Binding ApplicationCommands.SaveCommand}"/>
                            <TabControl Grid.Row="1" Margin="10" prism:RegionManager.RegionName="ModuleERegion" />
                        </Grid>

                        <!--IActiveAware命令-使您的命令IActiveAware只调用活动命令-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Button Content="IActiveAware命令-使您的命令IActiveAware只调用活动命令" Margin="10" Command="{Binding ApplicationCommands.SaveCommand}"/>
                            <TabControl Grid.Row="1" Margin="10" prism:RegionManager.RegionName="ModuleFRegion" />
                        </Grid>
                    </StackPanel>

                    <!--事件聚合器-->
                    <StackPanel>
                        <!--事件聚合器-使用IEventAggregator-->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentControl prism:RegionManager.RegionName="ModuleGRegion" />
                            <ContentControl Grid.Column="1" prism:RegionManager.RegionName="ModuleHRegion" />
                        </Grid>

                        <!--RegionContext-使用RegionContext将数据传递给嵌套区域-->
                        <Grid>
                            <ContentControl prism:RegionManager.RegionName="ModuleJRegion" />
                        </Grid>

                    </StackPanel>

                    <!--导航-->
                    <StackPanel>
                        <!--地区导航-了解如何实现基本的区域导航-->
                        <StackPanel>
                            <Button Command="{Binding NavigateCommand}" CommandParameter="ViewA" Margin="5">地区导航-了解如何实现基本的区域导航</Button>
                            <Button Command="{Binding NavigateCallbackCommand}" CommandParameter="ViewB" Margin="5">导航回调-导航完成时收到通知</Button>
                            <ContentControl prism:RegionManager.RegionName="ModuleKRegion" />
                        </StackPanel>

                        <!--导航参与-通过INavigationAware了解View和ViewModel导航参与-->
                        <StackPanel>
                            <Button Command="{Binding NavigateINavigationAwareCommand}" CommandParameter="ViewC" Margin="5">导航参与-通过INavigationAware了解View和ViewModel导航参与-View A</Button>
                            <Button Command="{Binding NavigateINavigationAwareCommand}" CommandParameter="ViewD" Margin="5">导航到现有视图-在导航期间控制视图实例-当点击第四次时,新建一个Tab页View</Button>
                            <TabControl prism:RegionManager.RegionName="ModuleLRegion" />
                        </StackPanel>

                        <!--传递参数-将参数从View / ViewModel传递到另一个View / ViewModel-->
                        <StackPanel>
                            <Grid>
                                <ContentControl prism:RegionManager.RegionName="ModuleMRegion" />
                            </Grid>
                        </StackPanel>

                        <!--确认/取消导航-使用IConfirmNavigationReqest界面确认或取消导航-->
                        <StackPanel>
                            <Button Command="{Binding NavigateIConfirmNavigationReqestCommand}" CommandParameter="ViewE" Margin="5">使用IConfirmNavigationReqest界面确认或取消导航</Button>
                            <Button Command="{Binding NavigateIConfirmNavigationReqestCommand}" CommandParameter="ViewF" Margin="5">离开上页时会弹出选择对话框,选是则进入新页,选否停留旧页</Button>
                            <ContentControl prism:RegionManager.RegionName="ModuleNRegion" />
                        </StackPanel>


                        <!--控制视图的生命周期-使用IRegionMemberLifetime自动从内存中删除视图-->
                        <StackPanel>
                            <Button Command="{Binding NavigateIRegionMemberLifetimeCommand}" CommandParameter="ViewG" Margin="5">控制视图的生命周期-使用IRegionMemberLifetime自动从内存中删除视图</Button>
                            <Button Command="{Binding NavigateIRegionMemberLifetimeCommand}" CommandParameter="ViewH" Margin="5">控制视图的生命周期-使用IRegionMemberLifetime自动从内存中删除视图</Button>
                            <ContentControl prism:RegionManager.RegionName="ModuleORegion" Margin="5"  />
                            <ItemsControl ItemsSource="{Binding Views}" Margin="5">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Background="LightBlue" Height="50" Width="50" Margin="2">
                                            <TextBlock Text="{Binding}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </StackPanel>

                        <!--导航日志-了解如何使用导航日志-->
                        <StackPanel>
                            <ContentControl prism:RegionManager.RegionName="ModulePRegion" Margin="5"  />
                        </StackPanel>
                    </StackPanel>

                    <!--交互-->
                    <StackPanel>
                        <!--交互性 - 通知请求-了解如何使用InteractionRequest显示弹出窗口-->
                        <StackPanel>
                            <ContentControl prism:RegionManager.RegionName="UsingPopupWindowActionRegion"/>
                        </StackPanel>

                        <!--交互性 - InvokeCommandAction-调用命令以响应任何事件-->
                        <StackPanel>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <StackPanel Grid.Row="0">
                                    <TextBlock Margin="5" FontSize="24" Foreground="DarkRed" TextWrapping="Wrap">InvokeCommandAction</TextBlock>
                                    <TextBlock Margin="5" TextWrapping="Wrap">The <Bold>InvokeCommandAction</Bold> is useful when you need to invoke a command in response to an event raised by a control in the view.</TextBlock>
                                    <TextBlock Margin="5" TextWrapping="Wrap">
                In the following example there is a list of items and we want to execute a command in the view model when an item is selected. 
                The view model will then change the "Selected Item" shown below.
                                    </TextBlock>
                                </StackPanel>

                                <ListBox Grid.Row="1" Margin="5" ItemsSource="{Binding Items}" SelectionMode="Single">
                                    <i:Interaction.Triggers>
                                        <!-- This event trigger will execute the action when the corresponding event is raised by the ListBox. -->
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <!-- This action will invoke the selected command in the view model and pass the parameters of the event to it. -->
                                            <!--<prism:InvokeCommandAction Command="{Binding SelectedCommand}" TriggerParameterPath="AddedItems" />-->

                                            <!--传递控件本身的事件参数-->
                                            <prism:InvokeCommandAction Command="{Binding SelectedWithEventParaCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ListBox>

                                <StackPanel Grid.Row="2" Margin="5" Orientation="Horizontal">
                                    <TextBlock Foreground="DarkRed" FontWeight="Bold">Selected Item:</TextBlock>
                                    <TextBlock AutomationProperties.AutomationId="SelectedItemTextBlock" Foreground="DarkRed" FontWeight="Bold" Margin="5,0" Text="{Binding SelectedItemText}" />
                                </StackPanel>

                            </Grid>
                        </StackPanel>
                    </StackPanel>
                </WrapPanel>

                <!--Region占位符-->
            <ContentControl prism:RegionManager.RegionName="ContentRegion" />
        </DockPanel>
        </ScrollViewer>
    </Grid>
</Window>
